require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe ShoppingCartsController do

=begin
  # This should return the minimal set of attributes required to create a valid
  # ShoppingCart. As you add validations to ShoppingCart, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { { "buyer_id" => "1" } }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # ShoppingCartsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET index" do
    it "assigns all shopping_carts as @shopping_carts" do
      shopping_cart = ShoppingCart.create! valid_attributes
      get :index, {}, valid_session
      assigns(:shopping_carts).should eq([shopping_cart])
    end
  end

  describe "GET show" do
    it "assigns the requested shopping_cart as @shopping_cart" do
      shopping_cart = ShoppingCart.create! valid_attributes
      get :show, {:id => shopping_cart.to_param}, valid_session
      assigns(:shopping_cart).should eq(shopping_cart)
    end
  end

  describe "GET new" do
    it "assigns a new shopping_cart as @shopping_cart" do
      get :new, {}, valid_session
      assigns(:shopping_cart).should be_a_new(ShoppingCart)
    end
  end

  describe "GET edit" do
    it "assigns the requested shopping_cart as @shopping_cart" do
      shopping_cart = ShoppingCart.create! valid_attributes
      get :edit, {:id => shopping_cart.to_param}, valid_session
      assigns(:shopping_cart).should eq(shopping_cart)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new ShoppingCart" do
        expect {
          post :create, {:shopping_cart => valid_attributes}, valid_session
        }.to change(ShoppingCart, :count).by(1)
      end

      it "assigns a newly created shopping_cart as @shopping_cart" do
        post :create, {:shopping_cart => valid_attributes}, valid_session
        assigns(:shopping_cart).should be_a(ShoppingCart)
        assigns(:shopping_cart).should be_persisted
      end

      it "redirects to the created shopping_cart" do
        post :create, {:shopping_cart => valid_attributes}, valid_session
        response.should redirect_to(ShoppingCart.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved shopping_cart as @shopping_cart" do
        # Trigger the behavior that occurs when invalid params are submitted
        ShoppingCart.any_instance.stub(:save).and_return(false)
        post :create, {:shopping_cart => { "buyer_id" => "invalid value" }}, valid_session
        assigns(:shopping_cart).should be_a_new(ShoppingCart)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        ShoppingCart.any_instance.stub(:save).and_return(false)
        post :create, {:shopping_cart => { "buyer_id" => "invalid value" }}, valid_session
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested shopping_cart" do
        shopping_cart = ShoppingCart.create! valid_attributes
        # Assuming there are no other shopping_carts in the database, this
        # specifies that the ShoppingCart created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        ShoppingCart.any_instance.should_receive(:update_attributes).with({ "buyer_id" => "1" })
        put :update, {:id => shopping_cart.to_param, :shopping_cart => { "buyer_id" => "1" }}, valid_session
      end

      it "assigns the requested shopping_cart as @shopping_cart" do
        shopping_cart = ShoppingCart.create! valid_attributes
        put :update, {:id => shopping_cart.to_param, :shopping_cart => valid_attributes}, valid_session
        assigns(:shopping_cart).should eq(shopping_cart)
      end

      it "redirects to the shopping_cart" do
        shopping_cart = ShoppingCart.create! valid_attributes
        put :update, {:id => shopping_cart.to_param, :shopping_cart => valid_attributes}, valid_session
        response.should redirect_to(shopping_cart)
      end
    end

    describe "with invalid params" do
      it "assigns the shopping_cart as @shopping_cart" do
        shopping_cart = ShoppingCart.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        ShoppingCart.any_instance.stub(:save).and_return(false)
        put :update, {:id => shopping_cart.to_param, :shopping_cart => { "buyer_id" => "invalid value" }}, valid_session
        assigns(:shopping_cart).should eq(shopping_cart)
      end

      it "re-renders the 'edit' template" do
        shopping_cart = ShoppingCart.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        ShoppingCart.any_instance.stub(:save).and_return(false)
        put :update, {:id => shopping_cart.to_param, :shopping_cart => { "buyer_id" => "invalid value" }}, valid_session
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested shopping_cart" do
      shopping_cart = ShoppingCart.create! valid_attributes
      expect {
        delete :destroy, {:id => shopping_cart.to_param}, valid_session
      }.to change(ShoppingCart, :count).by(-1)
    end

    it "redirects to the shopping_carts list" do
      shopping_cart = ShoppingCart.create! valid_attributes
      delete :destroy, {:id => shopping_cart.to_param}, valid_session
      response.should redirect_to(shopping_carts_url)
    end
  end
=end
  login_user
  before (:each) do
=begin
    @request.env["devise.mapping"] = Devise.mappings[:user]
    @user = FactoryGirl.create(:user)
    sign_in @user
=end
    @item = FactoryGirl.create(:item)
    @user1 = FactoryGirl.create(:user, :email => 'test@gmail.com')
    @item1 = FactoryGirl.create(:item, :title => 'item1', :user_id => @user1.id)
    @item2 = FactoryGirl.create(:item, :title => 'item2', :user_id => @user1.id)
    @shopping_cart = FactoryGirl.create(:shopping_cart)
  end

  describe "Signed in user" do
    it "should be a signed in user" do
      subject.current_user.should_not be_nil
    end
  end


  describe "GET 'add_to_cart'" do
    it "return http success when go from home page" do
      get :add_to_cart, {:item_id => @item1.id, :quantity => 1}
      response.should be_redirect
      response.should redirect_to(assigns[:shopping_cart])
    end
    it "return http success when go from item detail page" do
      get 'add_to_cart', {:item_id => @item1.id, :quantity => 1}
      response.should be_redirect
      response.should redirect_to(assigns(:shopping_cart))
    end

  end

  describe "POST 'update_quantity'" do

    it "return http success when user changes quantity of item in shopping cart" do
      post 'update_quantity', {:item_hash => "{\"2\"=>1, \"3\"=>5}", :change_quantity_item_id => ["1", "4"]}
      response.should be_redirect
    end
    it "return http success when user deletes item in shopping cart" do
      post 'update_quantity', {:item_hash => "{\"2\"=>1, \"3\"=>5}", :change_quantity_item_id => ["1", "5"], :delete_item_id => ["0"]}
      response.should be_redirect
    end
    it "user can't claim quantity of a item which is greater than its remaining quantity" do
      post 'update_quantity', {:item_hash => "{\"2\"=>1, \"3\"=>5}", :change_quantity_item_id => ["6", "1"]}
      flash[:notice].should eq("Sorry! Only #{@item1.quantity} of #{@item1.title} is available at the moment")
    end
  end


  describe "GET 'show'" do
    it "return http success" do
      get 'show', :id => @shopping_cart.to_param
      response.should be_success
    end
    it "assigns shopping cart as @shopping_cart" do
      get 'show', :id => @shopping_cart.to_param
      assigns(:shopping_cart).should_not be_nil
    end
  end



end
